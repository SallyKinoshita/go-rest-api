// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/blueish-co/omni-workspace/server/internal/config"
	"github.com/blueish-co/omni-workspace/server/internal/interface-adapter/controller"
	"github.com/blueish-co/omni-workspace/server/internal/interface-adapter/gateway-query-service"
	"github.com/blueish-co/omni-workspace/server/internal/interface-adapter/gateway-repository"
	"github.com/blueish-co/omni-workspace/server/internal/middleware"
	"github.com/blueish-co/omni-workspace/server/internal/use-case"
	"github.com/uptrace/bun"
)

// Injectors from wire.go:

func New(ctx context.Context, cfg *config.Config, db *bun.DB) (DI, error) {
	clientUser := gatewayrepository.NewClientUser()
	aws := cfg.AWS
	environment := cfg.Environment
	awsConfig, err := config.NewAWS(ctx, aws, environment)
	if err != nil {
		return DI{}, err
	}
	client := config.NewCognito(awsConfig)
	clientUserAuth := gatewayrepository.NewClientUserAuth(client, aws)
	usecaseClientUser := usecase.NewClientUser(db, clientUser, clientUserAuth)
	preClientUser := gatewayrepository.NewPreClientUser()
	organization := gatewayrepository.NewOrganization()
	organizationClientUser := gatewayrepository.NewOrganizationClientUser()
	usecaseClientUserAuth := usecase.NewClientUserAuth(db, preClientUser, clientUser, clientUserAuth, organization, organizationClientUser)
	storageClient, err := config.NewCloudStorage(ctx)
	if err != nil {
		return DI{}, err
	}
	googleCloud := &cfg.GoogleCloud
	cloudStorage := &googleCloud.CloudStorage
	string2 := cloudStorage.Bucket
	jwtConfig, err := providerGetGCSConfig(ctx, cfg)
	if err != nil {
		return DI{}, err
	}
	media := gatewayrepository.NewMedia(storageClient, string2, jwtConfig)
	gatewayqueryserviceOrganization := gatewayqueryservice.NewOrganization()
	usecaseOrganization := usecase.NewOrganization(db, organization, organizationClientUser, clientUser, media, gatewayqueryserviceOrganization)
	workspace := gatewayrepository.NewWorkspace()
	workspaceClientUser := gatewayrepository.NewWorkspaceClientUser()
	service := gatewayrepository.NewService()
	gatewayqueryserviceWorkspace := gatewayqueryservice.NewWorkspace()
	gatewayqueryserviceWorkspaceClientUser := gatewayqueryservice.NewWorkspaceClientUser()
	usecaseWorkspace := usecase.NewWorkspace(db, workspace, workspaceClientUser, service, gatewayqueryserviceOrganization, gatewayqueryserviceWorkspace, media, gatewayqueryserviceWorkspaceClientUser)
	usecaseService := usecase.NewService(db, service)
	llm := &cfg.LLM
	llmServiceClient := config.NewLLM(llm)
	gatewayrepositoryLLM := gatewayrepository.NewLLM(llmServiceClient)
	node := gatewayrepository.NewNode(storageClient, string2, jwtConfig)
	edge := gatewayrepository.NewEdge()
	usecaseNode := usecase.NewNode(db, gatewayrepositoryLLM, node, edge)
	healthCheck := usecase.NewHealthCheck(gatewayrepositoryLLM)
	apiKey := gatewayrepository.NewAPIKey()
	crypto := cfg.Crypto
	aes256GCM, err := config.NewAES256GCM(crypto)
	if err != nil {
		return DI{}, err
	}
	usecaseAPIKey := usecase.NewAPIKey(db, apiKey, aes256GCM)
	http := config.NewHTTP()
	omniCustomizeMetaMeDify := cfg.Dify
	dify := gatewayrepository.NewDify(http, omniCustomizeMetaMeDify)
	omniAssistant := usecase.NewOmniAssistant(aes256GCM, dify)
	poC := gatewayrepository.NewPoC(client, aws)
	serviceClientUser := gatewayrepository.NewServiceClientUser()
	workflow := gatewayrepository.NewWorkflow()
	usecasePoC := usecase.NewPoC(db, poC, clientUser, clientUserAuth, organizationClientUser, organization, workspace, workspaceClientUser, service, serviceClientUser, workflow, node, edge, media)
	controllerController := controller.New(usecaseClientUser, usecaseClientUserAuth, usecaseOrganization, usecaseWorkspace, usecaseService, usecaseNode, healthCheck, usecaseAPIKey, omniAssistant, usecasePoC)
	middlewareMiddleware := middleware.New(db, aes256GCM, clientUser, clientUserAuth, organizationClientUser, workspaceClientUser, apiKey)
	di := DI{
		Controller: controllerController,
		Middleware: middlewareMiddleware,
	}
	return di, nil
}

func NewOmniCustomizeMetaMe(ctx context.Context, cfg *config.OmniCustomizeMetaMeConfig) (OmniCustomizeMetaMeDI, error) {
	omniCustomizeMetaMeDiscord := cfg.Discord
	environment := cfg.Environment
	session, err := config.NewOmniCustomizeMetaMeDiscord(omniCustomizeMetaMeDiscord)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	http := config.NewHTTP()
	omniCustomizeMetaMeDify := cfg.Dify
	dify := gatewayrepository.NewDify(http, omniCustomizeMetaMeDify)
	googleSpreadSheetID, err := providerGetSpreadSheetID(cfg)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	googleSpreadSheetNameChat, err := providerGetSpreadSheetNameChat(cfg)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	googleSpreadSheetNameReaction, err := providerGetSpreadSheetNameReaction(cfg)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	googleSpreadSheetNameChannel, err := providerGetSpreadSheetNameChannel(cfg)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	googleSpreadSheetNameUser, err := providerGetSpreadSheetNameUser(cfg)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	googleSpreadSheetNameUserRole, err := providerGetSpreadSheetNameUserRole(cfg)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	spreadSheetService, err := config.NewSpreadSheetService(ctx, googleSpreadSheetID, googleSpreadSheetNameChat, googleSpreadSheetNameReaction, googleSpreadSheetNameChannel, googleSpreadSheetNameUser, googleSpreadSheetNameUserRole)
	if err != nil {
		return OmniCustomizeMetaMeDI{}, err
	}
	omniCustomizeMetaMeChat := gatewayrepository.NewOmniCustomizeMetaMeChat(spreadSheetService)
	omniCustomizeMetaMe := usecase.NewOmniCustomizeMetaMe(omniCustomizeMetaMeDiscord, environment, session, dify, omniCustomizeMetaMeChat)
	omniCustomizeMetaMeController := controller.NewOmniCustomizeMetaMe(omniCustomizeMetaMe)
	omniCustomizeMetaMeBasicAuth := cfg.BasicAuth
	omniCustomizeMetaMeMiddleware := middleware.NewOmniCustomizeMetaMe(omniCustomizeMetaMeBasicAuth)
	omniCustomizeMetaMeDI := OmniCustomizeMetaMeDI{
		Controller: omniCustomizeMetaMeController,
		Middleware: omniCustomizeMetaMeMiddleware,
	}
	return omniCustomizeMetaMeDI, nil
}
