// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for SampleServiceCreateSampleUserParamsPrefecture.
const (
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREAICHI       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_AICHI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREAKITA       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_AKITA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREAOMORI      SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_AOMORI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURECHIBA       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_CHIBA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREEHIME       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_EHIME"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREFUKUI       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_FUKUI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREFUKUOKA     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_FUKUOKA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREFUKUSHIMA   SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_FUKUSHIMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREGIFU        SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_GIFU"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREGUNMA       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_GUNMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREHIROSHIMA   SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_HIROSHIMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREHOKKAIDO    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_HOKKAIDO"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREHYOGO       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_HYOGO"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREIBARAKI     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_IBARAKI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREISHIKAWA    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_ISHIKAWA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREIWATE       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_IWATE"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREKAGAWA      SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_KAGAWA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREKAGOSHIMA   SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_KAGOSHIMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREKANAGAWA    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_KANAGAWA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREKOCHI       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_KOCHI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREKUMAMOTO    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_KUMAMOTO"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREKYOTO       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_KYOTO"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREMIE         SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_MIE"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREMIYAGI      SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_MIYAGI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREMIYAZAKI    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_MIYAZAKI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURENAGANO      SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_NAGANO"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURENAGASAKI    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_NAGASAKI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURENARA        SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_NARA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURENIIGATA     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_NIIGATA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREOITA        SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_OITA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREOKAYAMA     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_OKAYAMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREOKINAWA     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_OKINAWA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREOSAKA       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_OSAKA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURESAGA        SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_SAGA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURESAITAMA     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_SAITAMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURESHIGA       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_SHIGA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURESHIMANE     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_SHIMANE"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURESHIZUOKA    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_SHIZUOKA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURETOCHIGI     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_TOCHIGI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURETOKUSHIMA   SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_TOKUSHIMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURETOKYO       SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_TOKYO"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURETOTTORI     SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_TOTTORI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTURETOYAMA      SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_TOYAMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREUNSPECIFIED SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_UNSPECIFIED"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREWAKAYAMA    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_WAKAYAMA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREYAMAGATA    SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_YAMAGATA"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREYAMAGUCHI   SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_YAMAGUCHI"
	SampleServiceCreateSampleUserParamsPrefecturePREFECTUREYAMANASHI   SampleServiceCreateSampleUserParamsPrefecture = "PREFECTURE_YAMANASHI"
)

// Defines values for SampleServiceUpdateSampleUserParamsPrefecture.
const (
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREAICHI       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_AICHI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREAKITA       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_AKITA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREAOMORI      SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_AOMORI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURECHIBA       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_CHIBA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREEHIME       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_EHIME"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREFUKUI       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_FUKUI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREFUKUOKA     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_FUKUOKA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREFUKUSHIMA   SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_FUKUSHIMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREGIFU        SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_GIFU"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREGUNMA       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_GUNMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREHIROSHIMA   SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_HIROSHIMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREHOKKAIDO    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_HOKKAIDO"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREHYOGO       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_HYOGO"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREIBARAKI     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_IBARAKI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREISHIKAWA    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_ISHIKAWA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREIWATE       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_IWATE"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREKAGAWA      SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_KAGAWA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREKAGOSHIMA   SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_KAGOSHIMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREKANAGAWA    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_KANAGAWA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREKOCHI       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_KOCHI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREKUMAMOTO    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_KUMAMOTO"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREKYOTO       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_KYOTO"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREMIE         SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_MIE"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREMIYAGI      SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_MIYAGI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREMIYAZAKI    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_MIYAZAKI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURENAGANO      SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_NAGANO"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURENAGASAKI    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_NAGASAKI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURENARA        SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_NARA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURENIIGATA     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_NIIGATA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREOITA        SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_OITA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREOKAYAMA     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_OKAYAMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREOKINAWA     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_OKINAWA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREOSAKA       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_OSAKA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURESAGA        SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_SAGA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURESAITAMA     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_SAITAMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURESHIGA       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_SHIGA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURESHIMANE     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_SHIMANE"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURESHIZUOKA    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_SHIZUOKA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURETOCHIGI     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_TOCHIGI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURETOKUSHIMA   SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_TOKUSHIMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURETOKYO       SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_TOKYO"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURETOTTORI     SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_TOTTORI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTURETOYAMA      SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_TOYAMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREUNSPECIFIED SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_UNSPECIFIED"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREWAKAYAMA    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_WAKAYAMA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREYAMAGATA    SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_YAMAGATA"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREYAMAGUCHI   SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_YAMAGUCHI"
	SampleServiceUpdateSampleUserParamsPrefecturePREFECTUREYAMANASHI   SampleServiceUpdateSampleUserParamsPrefecture = "PREFECTURE_YAMANASHI"
)

// V1CreateSampleUserResponse defines model for v1CreateSampleUserResponse.
type V1CreateSampleUserResponse = map[string]interface{}

// V1DeleteSampleUserResponse defines model for v1DeleteSampleUserResponse.
type V1DeleteSampleUserResponse = map[string]interface{}

// V1GetSampleUserResponse defines model for v1GetSampleUserResponse.
type V1GetSampleUserResponse struct {
	BirthDate       *time.Time `json:"birthDate,omitempty"`
	BuildingAndRoom *string    `json:"buildingAndRoom,omitempty"`
	City            *string    `json:"city,omitempty"`
	EmailAddress    *string    `json:"emailAddress,omitempty"`
	FirstName       *string    `json:"firstName,omitempty"`
	FirstNameKana   *string    `json:"firstNameKana,omitempty"`
	LastName        *string    `json:"lastName,omitempty"`
	LastNameKana    *string    `json:"lastNameKana,omitempty"`
	PostalCode      *string    `json:"postalCode,omitempty"`
	Prefecture      *string    `json:"prefecture,omitempty"`
	SampleUserId    *string    `json:"sampleUserId,omitempty"`
	StreetAndNumber *string    `json:"streetAndNumber,omitempty"`
	Tel             *string    `json:"tel,omitempty"`
}

// V1ListSampleUserRes defines model for v1ListSampleUserRes.
type V1ListSampleUserRes struct {
	BirthDate       *time.Time `json:"birthDate,omitempty"`
	BuildingAndRoom *string    `json:"buildingAndRoom,omitempty"`
	City            *string    `json:"city,omitempty"`
	EmailAddress    *string    `json:"emailAddress,omitempty"`
	FirstName       *string    `json:"firstName,omitempty"`
	FirstNameKana   *string    `json:"firstNameKana,omitempty"`
	LastName        *string    `json:"lastName,omitempty"`
	LastNameKana    *string    `json:"lastNameKana,omitempty"`
	PostalCode      *string    `json:"postalCode,omitempty"`
	Prefecture      *string    `json:"prefecture,omitempty"`
	SampleUserId    *string    `json:"sampleUserId,omitempty"`
	StreetAndNumber *string    `json:"streetAndNumber,omitempty"`
	Tel             *string    `json:"tel,omitempty"`
}

// V1ListSampleUserResponse defines model for v1ListSampleUserResponse.
type V1ListSampleUserResponse struct {
	SampleUsers *[]V1ListSampleUserRes `json:"sampleUsers,omitempty"`
}

// V1UpdateSampleUserResponse defines model for v1UpdateSampleUserResponse.
type V1UpdateSampleUserResponse = map[string]interface{}

// SampleServiceCreateSampleUserParams defines parameters for SampleServiceCreateSampleUser.
type SampleServiceCreateSampleUserParams struct {
	FirstName     *string    `form:"firstName,omitempty" json:"firstName,omitempty"`
	LastName      *string    `form:"lastName,omitempty" json:"lastName,omitempty"`
	FirstNameKana *string    `form:"firstNameKana,omitempty" json:"firstNameKana,omitempty"`
	LastNameKana  *string    `form:"lastNameKana,omitempty" json:"lastNameKana,omitempty"`
	EmailAddress  *string    `form:"emailAddress,omitempty" json:"emailAddress,omitempty"`
	Tel           *string    `form:"tel,omitempty" json:"tel,omitempty"`
	BirthDate     *time.Time `form:"birthDate,omitempty" json:"birthDate,omitempty"`
	PostalCode    *string    `form:"postalCode,omitempty" json:"postalCode,omitempty"`

	// Prefecture - PREFECTURE_UNSPECIFIED: 未指定
	// - PREFECTURE_HOKKAIDO: 北海道
	// - PREFECTURE_AOMORI: 青森県
	// - PREFECTURE_IWATE: 岩手県
	// - PREFECTURE_MIYAGI: 宮城県
	// - PREFECTURE_AKITA: 秋田県
	// - PREFECTURE_YAMAGATA: 山形県
	// - PREFECTURE_FUKUSHIMA: 福島県
	// - PREFECTURE_IBARAKI: 茨城県
	// - PREFECTURE_TOCHIGI: 栃木県
	// - PREFECTURE_GUNMA: 群馬県
	// - PREFECTURE_SAITAMA: 埼玉県
	// - PREFECTURE_CHIBA: 千葉県
	// - PREFECTURE_TOKYO: 東京都
	// - PREFECTURE_KANAGAWA: 神奈川県
	// - PREFECTURE_NIIGATA: 新潟県
	// - PREFECTURE_TOYAMA: 富山県
	// - PREFECTURE_ISHIKAWA: 石川県
	// - PREFECTURE_FUKUI: 福井県
	// - PREFECTURE_YAMANASHI: 山梨県
	// - PREFECTURE_NAGANO: 長野県
	// - PREFECTURE_GIFU: 岐阜県
	// - PREFECTURE_SHIZUOKA: 静岡県
	// - PREFECTURE_AICHI: 愛知県
	// - PREFECTURE_MIE: 三重県
	// - PREFECTURE_SHIGA: 滋賀県
	// - PREFECTURE_KYOTO: 京都府
	// - PREFECTURE_OSAKA: 大阪府
	// - PREFECTURE_HYOGO: 兵庫県
	// - PREFECTURE_NARA: 奈良県
	// - PREFECTURE_WAKAYAMA: 和歌山県
	// - PREFECTURE_TOTTORI: 鳥取県
	// - PREFECTURE_SHIMANE: 島根県
	// - PREFECTURE_OKAYAMA: 岡山県
	// - PREFECTURE_HIROSHIMA: 広島県
	// - PREFECTURE_YAMAGUCHI: 山口県
	// - PREFECTURE_TOKUSHIMA: 徳島県
	// - PREFECTURE_KAGAWA: 香川県
	// - PREFECTURE_EHIME: 愛媛県
	// - PREFECTURE_KOCHI: 高知県
	// - PREFECTURE_FUKUOKA: 福岡県
	// - PREFECTURE_SAGA: 佐賀県
	// - PREFECTURE_NAGASAKI: 長崎県
	// - PREFECTURE_KUMAMOTO: 熊本県
	// - PREFECTURE_OITA: 大分県
	// - PREFECTURE_MIYAZAKI: 宮崎県
	// - PREFECTURE_KAGOSHIMA: 鹿児島県
	// - PREFECTURE_OKINAWA: 沖縄
	Prefecture      *SampleServiceCreateSampleUserParamsPrefecture `form:"prefecture,omitempty" json:"prefecture,omitempty"`
	City            *string                                        `form:"city,omitempty" json:"city,omitempty"`
	StreetAndNumber *string                                        `form:"streetAndNumber,omitempty" json:"streetAndNumber,omitempty"`
	BuildingAndRoom *string                                        `form:"buildingAndRoom,omitempty" json:"buildingAndRoom,omitempty"`
}

// SampleServiceCreateSampleUserParamsPrefecture defines parameters for SampleServiceCreateSampleUser.
type SampleServiceCreateSampleUserParamsPrefecture string

// SampleServiceDeleteSampleUserParams defines parameters for SampleServiceDeleteSampleUser.
type SampleServiceDeleteSampleUserParams struct {
	// SampleUserId サンプルなので、UserIDはBodyに含める
	SampleUserId *string `form:"sampleUserId,omitempty" json:"sampleUserId,omitempty"`
}

// SampleServiceGetSampleUserParams defines parameters for SampleServiceGetSampleUser.
type SampleServiceGetSampleUserParams struct {
	// SampleUserId サンプルなので、UserIDはBodyに含める
	SampleUserId *string `form:"sampleUserId,omitempty" json:"sampleUserId,omitempty"`
}

// SampleServiceListSampleUserParams defines parameters for SampleServiceListSampleUser.
type SampleServiceListSampleUserParams struct {
	Page  *int32 `form:"page,omitempty" json:"page,omitempty"`
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// SampleServiceUpdateSampleUserParams defines parameters for SampleServiceUpdateSampleUser.
type SampleServiceUpdateSampleUserParams struct {
	// SampleUserId サンプルなので、UserIDはBodyに含める
	SampleUserId  *string `form:"sampleUserId,omitempty" json:"sampleUserId,omitempty"`
	FirstName     *string `form:"firstName,omitempty" json:"firstName,omitempty"`
	LastName      *string `form:"lastName,omitempty" json:"lastName,omitempty"`
	FirstNameKana *string `form:"firstNameKana,omitempty" json:"firstNameKana,omitempty"`
	LastNameKana  *string `form:"lastNameKana,omitempty" json:"lastNameKana,omitempty"`
	EmailAddress  *string `form:"emailAddress,omitempty" json:"emailAddress,omitempty"`
	PostalCode    *string `form:"postalCode,omitempty" json:"postalCode,omitempty"`

	// Prefecture - PREFECTURE_UNSPECIFIED: 未指定
	// - PREFECTURE_HOKKAIDO: 北海道
	// - PREFECTURE_AOMORI: 青森県
	// - PREFECTURE_IWATE: 岩手県
	// - PREFECTURE_MIYAGI: 宮城県
	// - PREFECTURE_AKITA: 秋田県
	// - PREFECTURE_YAMAGATA: 山形県
	// - PREFECTURE_FUKUSHIMA: 福島県
	// - PREFECTURE_IBARAKI: 茨城県
	// - PREFECTURE_TOCHIGI: 栃木県
	// - PREFECTURE_GUNMA: 群馬県
	// - PREFECTURE_SAITAMA: 埼玉県
	// - PREFECTURE_CHIBA: 千葉県
	// - PREFECTURE_TOKYO: 東京都
	// - PREFECTURE_KANAGAWA: 神奈川県
	// - PREFECTURE_NIIGATA: 新潟県
	// - PREFECTURE_TOYAMA: 富山県
	// - PREFECTURE_ISHIKAWA: 石川県
	// - PREFECTURE_FUKUI: 福井県
	// - PREFECTURE_YAMANASHI: 山梨県
	// - PREFECTURE_NAGANO: 長野県
	// - PREFECTURE_GIFU: 岐阜県
	// - PREFECTURE_SHIZUOKA: 静岡県
	// - PREFECTURE_AICHI: 愛知県
	// - PREFECTURE_MIE: 三重県
	// - PREFECTURE_SHIGA: 滋賀県
	// - PREFECTURE_KYOTO: 京都府
	// - PREFECTURE_OSAKA: 大阪府
	// - PREFECTURE_HYOGO: 兵庫県
	// - PREFECTURE_NARA: 奈良県
	// - PREFECTURE_WAKAYAMA: 和歌山県
	// - PREFECTURE_TOTTORI: 鳥取県
	// - PREFECTURE_SHIMANE: 島根県
	// - PREFECTURE_OKAYAMA: 岡山県
	// - PREFECTURE_HIROSHIMA: 広島県
	// - PREFECTURE_YAMAGUCHI: 山口県
	// - PREFECTURE_TOKUSHIMA: 徳島県
	// - PREFECTURE_KAGAWA: 香川県
	// - PREFECTURE_EHIME: 愛媛県
	// - PREFECTURE_KOCHI: 高知県
	// - PREFECTURE_FUKUOKA: 福岡県
	// - PREFECTURE_SAGA: 佐賀県
	// - PREFECTURE_NAGASAKI: 長崎県
	// - PREFECTURE_KUMAMOTO: 熊本県
	// - PREFECTURE_OITA: 大分県
	// - PREFECTURE_MIYAZAKI: 宮崎県
	// - PREFECTURE_KAGOSHIMA: 鹿児島県
	// - PREFECTURE_OKINAWA: 沖縄
	Prefecture      *SampleServiceUpdateSampleUserParamsPrefecture `form:"prefecture,omitempty" json:"prefecture,omitempty"`
	City            *string                                        `form:"city,omitempty" json:"city,omitempty"`
	StreetAndNumber *string                                        `form:"streetAndNumber,omitempty" json:"streetAndNumber,omitempty"`
	BuildingAndRoom *string                                        `form:"buildingAndRoom,omitempty" json:"buildingAndRoom,omitempty"`
}

// SampleServiceUpdateSampleUserParamsPrefecture defines parameters for SampleServiceUpdateSampleUser.
type SampleServiceUpdateSampleUserParamsPrefecture string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SampleServiceCreateSampleUser request
	SampleServiceCreateSampleUser(ctx context.Context, params *SampleServiceCreateSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SampleServiceDeleteSampleUser request
	SampleServiceDeleteSampleUser(ctx context.Context, params *SampleServiceDeleteSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SampleServiceGetSampleUser request
	SampleServiceGetSampleUser(ctx context.Context, params *SampleServiceGetSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SampleServiceListSampleUser request
	SampleServiceListSampleUser(ctx context.Context, params *SampleServiceListSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SampleServiceUpdateSampleUser request
	SampleServiceUpdateSampleUser(ctx context.Context, params *SampleServiceUpdateSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SampleServiceCreateSampleUser(ctx context.Context, params *SampleServiceCreateSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSampleServiceCreateSampleUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SampleServiceDeleteSampleUser(ctx context.Context, params *SampleServiceDeleteSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSampleServiceDeleteSampleUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SampleServiceGetSampleUser(ctx context.Context, params *SampleServiceGetSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSampleServiceGetSampleUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SampleServiceListSampleUser(ctx context.Context, params *SampleServiceListSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSampleServiceListSampleUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SampleServiceUpdateSampleUser(ctx context.Context, params *SampleServiceUpdateSampleUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSampleServiceUpdateSampleUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSampleServiceCreateSampleUserRequest generates requests for SampleServiceCreateSampleUser
func NewSampleServiceCreateSampleUserRequest(server string, params *SampleServiceCreateSampleUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sample-user/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstNameKana != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstNameKana", runtime.ParamLocationQuery, *params.FirstNameKana); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastNameKana != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastNameKana", runtime.ParamLocationQuery, *params.LastNameKana); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailAddress", runtime.ParamLocationQuery, *params.EmailAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tel", runtime.ParamLocationQuery, *params.Tel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BirthDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "birthDate", runtime.ParamLocationQuery, *params.BirthDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postalCode", runtime.ParamLocationQuery, *params.PostalCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefecture != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefecture", runtime.ParamLocationQuery, *params.Prefecture); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.City != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city", runtime.ParamLocationQuery, *params.City); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetAndNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "streetAndNumber", runtime.ParamLocationQuery, *params.StreetAndNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BuildingAndRoom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "buildingAndRoom", runtime.ParamLocationQuery, *params.BuildingAndRoom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSampleServiceDeleteSampleUserRequest generates requests for SampleServiceDeleteSampleUser
func NewSampleServiceDeleteSampleUserRequest(server string, params *SampleServiceDeleteSampleUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sample-user/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SampleUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sampleUserId", runtime.ParamLocationQuery, *params.SampleUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSampleServiceGetSampleUserRequest generates requests for SampleServiceGetSampleUser
func NewSampleServiceGetSampleUserRequest(server string, params *SampleServiceGetSampleUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sample-user/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SampleUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sampleUserId", runtime.ParamLocationQuery, *params.SampleUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSampleServiceListSampleUserRequest generates requests for SampleServiceListSampleUser
func NewSampleServiceListSampleUserRequest(server string, params *SampleServiceListSampleUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sample-user/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSampleServiceUpdateSampleUserRequest generates requests for SampleServiceUpdateSampleUser
func NewSampleServiceUpdateSampleUserRequest(server string, params *SampleServiceUpdateSampleUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sample-user/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SampleUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sampleUserId", runtime.ParamLocationQuery, *params.SampleUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstNameKana != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstNameKana", runtime.ParamLocationQuery, *params.FirstNameKana); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastNameKana != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastNameKana", runtime.ParamLocationQuery, *params.LastNameKana); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailAddress", runtime.ParamLocationQuery, *params.EmailAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postalCode", runtime.ParamLocationQuery, *params.PostalCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefecture != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefecture", runtime.ParamLocationQuery, *params.Prefecture); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.City != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city", runtime.ParamLocationQuery, *params.City); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetAndNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "streetAndNumber", runtime.ParamLocationQuery, *params.StreetAndNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BuildingAndRoom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "buildingAndRoom", runtime.ParamLocationQuery, *params.BuildingAndRoom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SampleServiceCreateSampleUserWithResponse request
	SampleServiceCreateSampleUserWithResponse(ctx context.Context, params *SampleServiceCreateSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceCreateSampleUserResponse, error)

	// SampleServiceDeleteSampleUserWithResponse request
	SampleServiceDeleteSampleUserWithResponse(ctx context.Context, params *SampleServiceDeleteSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceDeleteSampleUserResponse, error)

	// SampleServiceGetSampleUserWithResponse request
	SampleServiceGetSampleUserWithResponse(ctx context.Context, params *SampleServiceGetSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceGetSampleUserResponse, error)

	// SampleServiceListSampleUserWithResponse request
	SampleServiceListSampleUserWithResponse(ctx context.Context, params *SampleServiceListSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceListSampleUserResponse, error)

	// SampleServiceUpdateSampleUserWithResponse request
	SampleServiceUpdateSampleUserWithResponse(ctx context.Context, params *SampleServiceUpdateSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceUpdateSampleUserResponse, error)
}

type SampleServiceCreateSampleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1CreateSampleUserResponse
	JSON500      *interface{}
}

// Status returns HTTPResponse.Status
func (r SampleServiceCreateSampleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SampleServiceCreateSampleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SampleServiceDeleteSampleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1DeleteSampleUserResponse
	JSON500      *interface{}
}

// Status returns HTTPResponse.Status
func (r SampleServiceDeleteSampleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SampleServiceDeleteSampleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SampleServiceGetSampleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1GetSampleUserResponse
	JSON404      *interface{}
	JSON500      *interface{}
}

// Status returns HTTPResponse.Status
func (r SampleServiceGetSampleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SampleServiceGetSampleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SampleServiceListSampleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ListSampleUserResponse
	JSON500      *interface{}
}

// Status returns HTTPResponse.Status
func (r SampleServiceListSampleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SampleServiceListSampleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SampleServiceUpdateSampleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1UpdateSampleUserResponse
	JSON500      *interface{}
}

// Status returns HTTPResponse.Status
func (r SampleServiceUpdateSampleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SampleServiceUpdateSampleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SampleServiceCreateSampleUserWithResponse request returning *SampleServiceCreateSampleUserResponse
func (c *ClientWithResponses) SampleServiceCreateSampleUserWithResponse(ctx context.Context, params *SampleServiceCreateSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceCreateSampleUserResponse, error) {
	rsp, err := c.SampleServiceCreateSampleUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSampleServiceCreateSampleUserResponse(rsp)
}

// SampleServiceDeleteSampleUserWithResponse request returning *SampleServiceDeleteSampleUserResponse
func (c *ClientWithResponses) SampleServiceDeleteSampleUserWithResponse(ctx context.Context, params *SampleServiceDeleteSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceDeleteSampleUserResponse, error) {
	rsp, err := c.SampleServiceDeleteSampleUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSampleServiceDeleteSampleUserResponse(rsp)
}

// SampleServiceGetSampleUserWithResponse request returning *SampleServiceGetSampleUserResponse
func (c *ClientWithResponses) SampleServiceGetSampleUserWithResponse(ctx context.Context, params *SampleServiceGetSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceGetSampleUserResponse, error) {
	rsp, err := c.SampleServiceGetSampleUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSampleServiceGetSampleUserResponse(rsp)
}

// SampleServiceListSampleUserWithResponse request returning *SampleServiceListSampleUserResponse
func (c *ClientWithResponses) SampleServiceListSampleUserWithResponse(ctx context.Context, params *SampleServiceListSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceListSampleUserResponse, error) {
	rsp, err := c.SampleServiceListSampleUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSampleServiceListSampleUserResponse(rsp)
}

// SampleServiceUpdateSampleUserWithResponse request returning *SampleServiceUpdateSampleUserResponse
func (c *ClientWithResponses) SampleServiceUpdateSampleUserWithResponse(ctx context.Context, params *SampleServiceUpdateSampleUserParams, reqEditors ...RequestEditorFn) (*SampleServiceUpdateSampleUserResponse, error) {
	rsp, err := c.SampleServiceUpdateSampleUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSampleServiceUpdateSampleUserResponse(rsp)
}

// ParseSampleServiceCreateSampleUserResponse parses an HTTP response from a SampleServiceCreateSampleUserWithResponse call
func ParseSampleServiceCreateSampleUserResponse(rsp *http.Response) (*SampleServiceCreateSampleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SampleServiceCreateSampleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1CreateSampleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSampleServiceDeleteSampleUserResponse parses an HTTP response from a SampleServiceDeleteSampleUserWithResponse call
func ParseSampleServiceDeleteSampleUserResponse(rsp *http.Response) (*SampleServiceDeleteSampleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SampleServiceDeleteSampleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1DeleteSampleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSampleServiceGetSampleUserResponse parses an HTTP response from a SampleServiceGetSampleUserWithResponse call
func ParseSampleServiceGetSampleUserResponse(rsp *http.Response) (*SampleServiceGetSampleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SampleServiceGetSampleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1GetSampleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSampleServiceListSampleUserResponse parses an HTTP response from a SampleServiceListSampleUserWithResponse call
func ParseSampleServiceListSampleUserResponse(rsp *http.Response) (*SampleServiceListSampleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SampleServiceListSampleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ListSampleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSampleServiceUpdateSampleUserResponse parses an HTTP response from a SampleServiceUpdateSampleUserWithResponse call
func ParseSampleServiceUpdateSampleUserResponse(rsp *http.Response) (*SampleServiceUpdateSampleUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SampleServiceUpdateSampleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1UpdateSampleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サンプルユーザー作成API
	// (POST /api/v1/sample-user/create)
	SampleServiceCreateSampleUser(ctx echo.Context, params SampleServiceCreateSampleUserParams) error
	// サンプルユーザー削除API
	// (POST /api/v1/sample-user/delete)
	SampleServiceDeleteSampleUser(ctx echo.Context, params SampleServiceDeleteSampleUserParams) error
	// サンプルユーザー取得API
	// (POST /api/v1/sample-user/get)
	SampleServiceGetSampleUser(ctx echo.Context, params SampleServiceGetSampleUserParams) error
	// サンプルユーザーリスト取得API
	// (POST /api/v1/sample-user/list)
	SampleServiceListSampleUser(ctx echo.Context, params SampleServiceListSampleUserParams) error
	// サンプルユーザー更新API
	// (POST /api/v1/sample-user/update)
	SampleServiceUpdateSampleUser(ctx echo.Context, params SampleServiceUpdateSampleUserParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SampleServiceCreateSampleUser converts echo context to params.
func (w *ServerInterfaceWrapper) SampleServiceCreateSampleUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SampleServiceCreateSampleUserParams
	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", ctx.QueryParams(), &params.FirstName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter firstName: %s", err))
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", ctx.QueryParams(), &params.LastName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastName: %s", err))
	}

	// ------------- Optional query parameter "firstNameKana" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstNameKana", ctx.QueryParams(), &params.FirstNameKana)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter firstNameKana: %s", err))
	}

	// ------------- Optional query parameter "lastNameKana" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastNameKana", ctx.QueryParams(), &params.LastNameKana)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastNameKana: %s", err))
	}

	// ------------- Optional query parameter "emailAddress" -------------

	err = runtime.BindQueryParameter("form", true, false, "emailAddress", ctx.QueryParams(), &params.EmailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	// ------------- Optional query parameter "tel" -------------

	err = runtime.BindQueryParameter("form", true, false, "tel", ctx.QueryParams(), &params.Tel)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tel: %s", err))
	}

	// ------------- Optional query parameter "birthDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "birthDate", ctx.QueryParams(), &params.BirthDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter birthDate: %s", err))
	}

	// ------------- Optional query parameter "postalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "postalCode", ctx.QueryParams(), &params.PostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postalCode: %s", err))
	}

	// ------------- Optional query parameter "prefecture" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefecture", ctx.QueryParams(), &params.Prefecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefecture: %s", err))
	}

	// ------------- Optional query parameter "city" -------------

	err = runtime.BindQueryParameter("form", true, false, "city", ctx.QueryParams(), &params.City)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter city: %s", err))
	}

	// ------------- Optional query parameter "streetAndNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "streetAndNumber", ctx.QueryParams(), &params.StreetAndNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter streetAndNumber: %s", err))
	}

	// ------------- Optional query parameter "buildingAndRoom" -------------

	err = runtime.BindQueryParameter("form", true, false, "buildingAndRoom", ctx.QueryParams(), &params.BuildingAndRoom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildingAndRoom: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SampleServiceCreateSampleUser(ctx, params)
	return err
}

// SampleServiceDeleteSampleUser converts echo context to params.
func (w *ServerInterfaceWrapper) SampleServiceDeleteSampleUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SampleServiceDeleteSampleUserParams
	// ------------- Optional query parameter "sampleUserId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sampleUserId", ctx.QueryParams(), &params.SampleUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sampleUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SampleServiceDeleteSampleUser(ctx, params)
	return err
}

// SampleServiceGetSampleUser converts echo context to params.
func (w *ServerInterfaceWrapper) SampleServiceGetSampleUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SampleServiceGetSampleUserParams
	// ------------- Optional query parameter "sampleUserId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sampleUserId", ctx.QueryParams(), &params.SampleUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sampleUserId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SampleServiceGetSampleUser(ctx, params)
	return err
}

// SampleServiceListSampleUser converts echo context to params.
func (w *ServerInterfaceWrapper) SampleServiceListSampleUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SampleServiceListSampleUserParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SampleServiceListSampleUser(ctx, params)
	return err
}

// SampleServiceUpdateSampleUser converts echo context to params.
func (w *ServerInterfaceWrapper) SampleServiceUpdateSampleUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SampleServiceUpdateSampleUserParams
	// ------------- Optional query parameter "sampleUserId" -------------

	err = runtime.BindQueryParameter("form", true, false, "sampleUserId", ctx.QueryParams(), &params.SampleUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sampleUserId: %s", err))
	}

	// ------------- Optional query parameter "firstName" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstName", ctx.QueryParams(), &params.FirstName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter firstName: %s", err))
	}

	// ------------- Optional query parameter "lastName" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastName", ctx.QueryParams(), &params.LastName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastName: %s", err))
	}

	// ------------- Optional query parameter "firstNameKana" -------------

	err = runtime.BindQueryParameter("form", true, false, "firstNameKana", ctx.QueryParams(), &params.FirstNameKana)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter firstNameKana: %s", err))
	}

	// ------------- Optional query parameter "lastNameKana" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastNameKana", ctx.QueryParams(), &params.LastNameKana)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lastNameKana: %s", err))
	}

	// ------------- Optional query parameter "emailAddress" -------------

	err = runtime.BindQueryParameter("form", true, false, "emailAddress", ctx.QueryParams(), &params.EmailAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailAddress: %s", err))
	}

	// ------------- Optional query parameter "postalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "postalCode", ctx.QueryParams(), &params.PostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postalCode: %s", err))
	}

	// ------------- Optional query parameter "prefecture" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefecture", ctx.QueryParams(), &params.Prefecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefecture: %s", err))
	}

	// ------------- Optional query parameter "city" -------------

	err = runtime.BindQueryParameter("form", true, false, "city", ctx.QueryParams(), &params.City)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter city: %s", err))
	}

	// ------------- Optional query parameter "streetAndNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "streetAndNumber", ctx.QueryParams(), &params.StreetAndNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter streetAndNumber: %s", err))
	}

	// ------------- Optional query parameter "buildingAndRoom" -------------

	err = runtime.BindQueryParameter("form", true, false, "buildingAndRoom", ctx.QueryParams(), &params.BuildingAndRoom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildingAndRoom: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SampleServiceUpdateSampleUser(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/sample-user/create", wrapper.SampleServiceCreateSampleUser)
	router.POST(baseURL+"/api/v1/sample-user/delete", wrapper.SampleServiceDeleteSampleUser)
	router.POST(baseURL+"/api/v1/sample-user/get", wrapper.SampleServiceGetSampleUser)
	router.POST(baseURL+"/api/v1/sample-user/list", wrapper.SampleServiceListSampleUser)
	router.POST(baseURL+"/api/v1/sample-user/update", wrapper.SampleServiceUpdateSampleUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaX1PbSBL/Kq65e3QC2ey96E0BY6t8WJT/VIrNUluKPRBt2ZJOkqmjKKosm00gOAuX",
	"DSRZyBEWMAnskRDylw3kwwyS7W9xNWPZRtKYs7lUbm9LT8Ez3dM9/ec36u5Mg7ScU2QJSroGmGmgpW/B",
	"nED+nLwyoEJBhwkhp2RhSoNqHGqKLGkQ7+pTCgQMkG9+D9M6mAmCySuDMAt7IA9DnU6rqLICVV2ERI2b",
	"oqrfGhR0sjUuqzlBBwzICDq8pIs5CILNszVdFaUJfPbNvJjNiNIEK2Xispw7I79Nkxb1KeoGzAlils1k",
	"VKhpVIJxUdX0mJCD5+9GBUmgUmSFc9ibmx25FVnTheyAnKHzKyoch2k9r9K3tZbBuQydQFch1FkpE8vn",
	"bkKVSqPDLGV9Jkhz8l9Fzell38H/zw4W9SxeYkc4ZOyh4hwyNpFROT3+VH3wDBkPkbGOjFmzsIWMcnX5",
	"JTJ2UXEBLxYNVDA8sUAynnDuo9IGKpVQ8TdU+oiK71Hxvrn/c/XkOeguqjpgR9sa5Keowxz5488qHAcM",
	"+FNfG/z6bOTro8VsO7YFVRWmOgV7Ssl0i5fYEzCdV0V9KoEF26kABbXhE6INZrCXWvJu6boCZjC/KI3L",
	"mDQDtbQqKrooS4ABDemBwTOLbb/Zm+wIB4JgEqpag+fK5f7L/fgKsgIlQREBA65e7r98FQSBIui3iGp9",
	"giL2TV7pa5j0Ul6Dal+avA/E7LKme3VBxTeodIhKD1FpD5UqxLVvUenj6fGaNbfEjnABq1KsVQxAJKsC",
	"ZsNha+uZgOqkmIbuV4hopQo5qBO33pgGIhb2tzxUp0AQSCTzziRx0H7UqCFNZ25l8AV4nfjwXwi/KL8D",
	"3y7Aj7P/AmxtGD/L3A2edzrxDBL+B32cYXcpMBIPDYUGkql46LtULDESGuCGuNAgE7DWdq3yHXP/528l",
	"B1GEj0ZZbpBnAmb5ofXmXd34yUXB8sN8nGMC9Sf3rc396lrZtc9dZ5MhJmC+em7NL3i3h7lRNswxAXN/",
	"31z/0bvPRrkkywSqOwvVBy+926PsMBtmMYV5cGAe/+KlGEpFU4kIN4wPqSyah28pKl5j42yUYwK18jOq",
	"Ekl+IMJhLa2nJWvtmZcgnIoRASdb9cqv3u0EyyVZTGCuf6z+OO8lGIhw1/D2vVLtH/M0+dFRnglYTw5O",
	"j36tl45d21E2xobZ61iB7X+a23PmuyfeM2Ic1zCUtfLSOl6nCRlt6PiibB4cUKyUiHDRhpT1Q6oIbGqO",
	"mPn0aJnuqxibiHDEWdYvFDvie8R4JlBffle/Q3FEmBtK4Vhaqj9ao5g5wn2T4qMsDsbH5qsNSjRxA1i8",
	"NbtaXd+mBWOICZy+n6/fuUc9PYzN99tC7bDg3Y6O8kmeCTQcZB6tubb5BIsVM7d26o92vduRUT6Mk+yH",
	"N+bRHs0uccy8PVebf+Hdvc5GWdt398vWv+juS/LJZCNRD7fNxRXq/YbZGE7Vw7fW0w9eAr4l5dUGVUSE",
	"i/N2qplHJWqqkXxNDdgxYC5uUoO9mbDmySH1lKgd7vXKY2oghiLccIi42dxdpbDzRIH63iNqFOAwJlGE",
	"8YIWRQkWB8Lp8RI1EHAMJwic1Jffma8pURxNDbPDJFqqt+9aaxTA4AnomVs75txtOmZ+QyRg1KRKYMNN",
	"T9Q/fDJ/WKKakY9yMWJH69VK9f3st/iDiPrctL+szz43GTgu5LP4CaO/KiAIoJTPAeZGZwLKU+NcbTwv",
	"zjXypDiXGs+IixU/Hc6l5nPhXG09ES4xjWfBuWg/Bc5FAv/OJRvynYsE5t3nRUddV27CuXPVxm8396hH",
	"SBOnvXfkvMYgeOwSRDDYdUFuKOW6n421LpNjfHV7JuThDLvYCHY6lwheugIEY6Rb17iLqImFbjsR8PMo",
	"ggHPJZfG3gI2SjSlPDduAZjbrV6nEqBykfGeA21AcgeY24pN4HGdZ4ON65qe1GiCikdp2s1t5ABjXX+y",
	"kqbDBT6e3VX5Rb6/XT2R844YCwLVrk1JcfdVfz/+Jy1LOpRIIScoSlZMk4qs73sNf1ZPA/h3UoNpDlSc",
	"BpNCNo+LQFKUtmWeX2N3bC2SU5zf82xAy6fTUNPG89lAU+/LuF79y+fQG6RJrwWIkg5VScDFTw5qmjAB",
	"SQn7DJWe48rVKFcfH1UfrJM2x4nd7CgUzdv3as8rtY0yWamgYrG2s2m9nSM/d5Exaz59bS7NIeMFKhio",
	"UEbGXXN5kaysosI9ZCyg4jwyHtQLm9U3G8hYRMZTZCwjYxYVisBpU4ptHJ0EUgw3ewg3xrCbtXwuJ6hT",
	"3RTjuDATJnBF7ay/wRiWQav/M6Th23v9b87frT/e6rb+d7eVvfX/OVKxC/aRsYMKBmmKDSLjxTU5M4WM",
	"PXNpDxUNVFzo8D3gaKX9vrOpY+fdz6YvnE2t0O49myagfoFUWlwxTx52m0qOkYufR548oo+kekqir/u/",
	"/nxJJMn6d+NyXso4s6h0h/j/EzLKtcoCMrZI3N8libSKij91Get+xn+WjG9mYO8ZnxW1C6Q8Ku2i4gdU",
	"must951Tje6a6Ap2IrWdK0r61a/arVzs+wmontPUFnOi3uNR/3s86DBn8l/VL5xj3pDvPdnyZDjXe7pZ",
	"q6+tlZfdZpl7BPi7e2SD/rjs847L/CmVP6Xyp1T+lMqfUvlTKn9K5U+p/CmVP6Xyp1R/jClVx//Q6XcA",
	"vnAHoFWFn1f4z7T2ppvx5qSZGZv5dwAAAP//fvaonfEwAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
